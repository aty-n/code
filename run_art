% setup
analysisname = 'analysisname';
projname = 'projectname';
projdir = '/path/to/project';
bidsdir = '/path/to/bids';

% thresholds
global_threshold = 3;
motion_threshold = 0.5;

tasks = {'task1', 'task2', 'task3'};
subDir = dir(fullfile(bidsdir, 'sub-*'));
errlog = {}; 
outlierlog = {};

% subject loop
for i = 1:numel(subDir)
    % identify sessions
    sessionDirs = dir(fullfile(subDir(i).folder, subDir(i).name, 'ses-*'));
    if isempty(sessionDirs) 
        sessions = {''}; 
    else
        sessions = {sessionDirs.name}; 
    end
    
    % session loop
    for sessIdx = 1:length(sessions)
        session = sessions{sessIdx};
        if isempty(session)
            sessionPath = fullfile(subDir(i).folder, subDir(i).name, 'func');
        else
            sessionPath = fullfile(subDir(i).folder, subDir(i).name, session, 'func');
        end
        
        % task loop
        for taskIdx = 1:length(tasks)
            taskName = tasks{taskIdx};
            niiSearchPattern = fullfile(sessionPath, 'run*', sprintf('*%s*desc-preprocessed_bold.nii', taskName));

            % find func
            niiDir = dir(niiSearchPattern);
            if isempty(niiDir)
                niiDir = dir([niiSearchPattern '.gz']);
                if isempty(niiDir)
                    errorMsg = sprintf('%s: %s %s desc-preprocessed_bold.nii (or .nii.gz) file not found.', subDir(i).name, session, taskName);
                    fprintf('%s\n', errorMsg);
                    errlog{end+1,1} = errorMsg;
                    continue;
                else
                    unix(['gunzip ' fullfile(niiDir.folder, niiDir.name)]);
                    niiDir = dir(niiSearchPattern);
                end
            end

            % locate rp.txt
            motionDir = dir(fullfile(niiDir.folder, sprintf('rp*%s*txt', taskName)));
            if isempty(motionDir)
                errorMsg = sprintf('%s: %s %s rp*.txt motion file not found.', subDir(i).name, session, taskName);
                fprintf('%s\n', errorMsg);
                errlog{end+1,1} = errorMsg;
                continue;
            end
            
            cd(niiDir.folder);
            
            artPath = fullfile(niiDir.folder, 'art');
            if ~exist(artPath,'dir'), mkdir(artPath); end
            fid = fopen(fullfile(artPath, 'art.cfg'),'wt');
            
            fprintf(fid,'sessions: %d\n', 1);
            fprintf(fid,'global_mean: %d\n', 1); 
            fprintf(fid,['global_threshold: ' num2str(global_threshold) '\n']); 
            fprintf(fid,['motion_threshold: ' num2str(motion_threshold) '\n']); 
            fprintf(fid,'motion_file_type: %d\n', 0); 
            fprintf(fid,'motion_fname_from_image_fname: 0\n'); 
            fprintf(fid,'use_diff_motion: %d\n', 1);
            fprintf(fid,'use_diff_global: %d\n', 1);
            fprintf(fid,'use_norms: %d\n', 1);
            fprintf(fid,'image_dir: %s\n', niiDir.folder);
            fprintf(fid,'motion_dir: %s\n', niiDir.folder);
            fprintf(fid,'output_dir: %s\n', artPath);
            fprintf(fid,'end\n\n');
            fprintf(fid,['session 1 image ' niiDir.name '\n\n']);
            fprintf(fid,['session 1 motion ' motionDir.name '\n\n']);
            fprintf(fid,'end\n');
            fclose(fid);
            
            try
                [output, h] = evalc('art(''sess_file'', fullfile(artPath, ''art.cfg''))');
                export_fig(fullfile(artPath, 'art_overview.pdf'), '-pdf');
                if ishandle(h), close(h); end
                unix(['mv ' fullfile(niiDir.folder, 'art_*') ' ' artPath]);
                
                unix(['gzip ' fullfile(niiDir.folder, niiDir.name)]);
                
                outlierPattern = 'Outlier detection: .* identified outliers';
                matches = regexp(output, outlierPattern, 'match');
                for match = matches
                    outlierMsg = sprintf('%s: %s %s - %s', subDir(i).name, session, taskName, match{1});
                    disp(outlierMsg);
                    outlierlog{end+1,1} = outlierMsg;
                end
            catch
                errorMsg = sprintf('%s: %s %s - ART processing failed.', subDir(i).name, session, taskName);
                errlog{end+1,1} = errorMsg;
                continue;
            end
        end
    end
end

% log errors
if ~isempty(errlog)
    disp(['errors encountered: ' num2str(length(errlog))]);
    
    artLogPath = fullfile(projdir, 'log_art.csv');
    fid = fopen(artLogPath, 'wt');
    fprintf(fid, 'SubjectID,Session,Task,Error\n'); 
    for j = 1:length(errlog)
        parts = strsplit(errlog{j}, ' ');
        SubjectID = parts{1};
        Session = parts{2};
        Task = parts{3};
        ErrorMessage = strjoin(parts(4:end), ' ');
        fprintf(fid, '%s,%s,%s,"%s"\n', SubjectID, Session, Task, ErrorMessage);
    end
    fclose(fid);
    disp(['errors logged in ' artLogPath]);
end

% log outliers
if ~isempty(outlierlog)
    outlierLogPath = fullfile(projdir, 'log_outliers.csv');
    fid = fopen(outlierLogPath, 'wt');
    fprintf(fid, 'SubjectID,Session,Task,Outliers\n');
    for idx = 1:length(outlierlog)
        parts = strsplit(outlierlog{idx}, ' ');
        SubjectID = parts{1};
        Session = parts{2};
        Task = parts{3};
        outlierInfo = strjoin(parts(5:end), ' ');
        outliersMatch = regexp(outlierInfo, '\d+', 'match');
        OutliersCount = '0';
        if ~isempty(outliersMatch)
            OutliersCount = outliersMatch{1};
        end
        fprintf(fid, '%s,%s,%s,%s\n', SubjectID, Session, Task, OutliersCount);
    end
    fclose(fid);
    disp(['outliers logged in ' outlierLogPath]);
end




